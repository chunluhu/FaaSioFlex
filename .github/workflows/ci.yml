name: CI

on:
  push:
    paths:
      - 'src/hello-world/**'  # Solo ejecuta el flujo si se modifica algo en hello-world
      - 'src/api_faas/**'      # Solo ejecuta el flujo si se modifica algo en api_faas
      - 'src/auth/**'      # Solo ejecuta el flujo si se modifica algo en auth
    #paths-ignore: # Sólo se usa o path o path-ignoe no las dos directivas. 
      #- 'src/auth/**'  # Ignorar cualquier cambio en este directorio
      #- 'src/auth_react/**'  # Ignorar otros subdirectorios no registrados
    branches:
      - main
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Choose the application to run (leave blank to run all)'
        required: false
        default: 'hello-world'
        type: choice
        options:
          - hello-world
          - api_faas
          - auth

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Determine Event Type
        id: event_type
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "event_type=push" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "event_type=workflow_dispatch" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Clonar el historial completo para permitir git diff
      - name: Get Changed Files
        id: changes
        run: |
          # Obtener archivos que han cambiado en la última confirmación
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            echo "changed_files=$(git diff --name-only HEAD^ HEAD)" >> $GITHUB_ENV
          else
            echo "No previous commits found. No files to check."
            echo "changed_files=" >> $GITHUB_ENV  # Asigna una cadena vacía si no hay commits
          fi

      - name: Filter Applications Based on Changes
        id: app_to_run
        run: |
          # Listar aplicaciones
          apps=("hello-world" "api_faas")
          
          # Convertir el string de archivos cambiados en un array
          changed_files=(${changed_files})
          echo "Changed files: ${changed_files[@]}"
          
          # Filtrar aplicaciones que se han modificado
          filtered_apps=()
          for file in "${changed_files[@]}"; do
            # Suponiendo que los archivos son en formato 'src/app_name/file.ext'
            app_name=$(basename $(dirname "$file"))  # Obtener el nombre de la carpeta (app)
            if [[ " ${apps[@]} " =~ " ${app_name} " ]]; then
              filtered_apps+=("$app_name")
            fi
          done

          # Guardar aplicaciones filtradas como variable de entorno
          if [ ${#filtered_apps[@]} -eq 0 ]; then
            echo "No valid applications modified."
            echo "app_to_run=" >> $GITHUB_ENV  # Asigna una cadena vacía si no hay cambios válidos
          else
            echo "Filtered applications: ${filtered_apps[@]}"
            echo "app_to_run=${filtered_apps[@]}" >> $GITHUB_ENV
          fi
  
      - name: Check which application will run
        run: |
          echo "Check which application will run: ${{ env.app_to_run }}"

      - name: Build and Push Docker Images
        run: |
          build_and_push_docker_images() {
            input_apps=("hello-world" "api_faas")
            event_type="${{ github.event_name }}"
            echo "Event Type: $event_type"
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            if [ "$event_type" == "push" ]; then
              if [ -z "${{ env.app_to_run }}" ]; then
                echo "No relevant changes detected. Building and pushing all applications..."
                for app in "${input_apps[@]}"; do
                  echo "Building Docker image for: $app"
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/$app:latest ./src/$app
                  echo "Pushing Docker image for: $app"
                  docker push ${{ secrets.DOCKER_USERNAME }}/$app:latest
                done
              else
                echo "Relevant changes detected. Building and pushing only the specified applications..."
                for app in "${{ env.app_to_run }}"; do
                  echo "Building Docker image for only the specified application: $app"
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/$app:latest ./src/$app
                  echo "Pushing Docker image for: $app"
                  docker push ${{ secrets.DOCKER_USERNAME }}/$app:latest
                done
              fi
            elif [ "$event_type" == "workflow_dispatch" ]; then
              app_name="${{ github.event.inputs.app_name }}"
              echo "Selected application: $app_name"
              if [ -z "$app_name" ]; then
                echo "No application selected. Building and pushing all applications..."
                for app in "${input_apps[@]}"; do
                  echo "Building Docker image for: $app"
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/$app:latest ./src/$app
                  echo "Pushing Docker image for: $app"
                  docker push ${{ secrets.DOCKER_USERNAME }}/$app:latest
                done
              else
                echo "Building Docker image for only the selected application: $app_name"
                docker build -t ${{ secrets.DOCKER_USERNAME }}/$app_name:latest ./src/$app_name
                echo "Pushing Docker image for: $app_name"
                docker push ${{ secrets.DOCKER_USERNAME }}/$app_name:latest
              fi
            fi
          }
      - name: Deploy Auth Application
        run: |
          deploy_auth() {
            echo "Checking if auth needs to be built..."
            
            # Verificar si hay cambios en el módulo auth
            if [[ " ${filtered_apps[@]} " =~ " auth " ]]; then
              echo "Detected changes in auth. Deploying..."
              
              # Navegar al directorio de auth y desplegar
              cd ./src/auth || exit 1
              
              # Construir y desplegar usando Docker Compose
              docker-compose up -d --build
              
              # O también puedes usar docker build si tienes un Dockerfile
              # docker build -t ${{ secrets.DOCKER_USERNAME }}/auth:latest .
              # docker push ${{ secrets.DOCKER_USERNAME }}/auth:latest
            else
              echo "No changes detected in auth. Skipping deployment."
            fi
          }
          build_and_push_docker_images
